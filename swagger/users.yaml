components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt

paths:
  /api/users:
    get:
      security:
        - cookieAuth: []
      summary: Get user's basic profile
      tags: [Users]
      description: GET Profile
      responses:
        200:
          content:
            application/json:
              description: Success
              schema:
                type: object
                properties:
                  userPk:
                    type: number
                  nickname:
                    type: string
                  profileImg:
                    type: string
                example:
                  userPk: 1
                  nickname: kingsujin
                  profileImg: random/url/path
        400:
          description: Cannot find user
        500:
          description: Internal server error

    post:
      summary: Registration
      tags: [Users]
      description: POST Registration
      responses:
        200:
          description: Success
        409:
          description: UserId already been taken
        500:
          description: internal server errors
      parameters:
        - name: userId
          in: formData
          description: user's id that must be unique
          type: string
          required: true
        
        - name: nickname
          in: formData
          description: user's nickname that must be unique
          type: string
          required: true
        
        - name: password
          in: formData
          description: password on registration
          type: string
          required: true
        
        - name: age
          in: formData
          description: user's age (number)
          type: number
          required: true
          schema:
            type: array
            items:
              type: number
              enum:
                - 10
                - 20
                - 30
                - 40
        - name: gender
          in: formData
          description: user's gender
          type: boolean
          required: true

        - name: pNum
          in: formData
          description: user's phone number
          type: string
          required: true

        - name: region
          in: formData
          description: province that user lives in
          type: string
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - 경기
                - 경남
                - 제주
              default: 경기
        
        - name: city
          in: formData
          description: city that user lives in
          type: string
          required: true
          schema:
            type: array
            items:
              type: string
              enum:
                - 서울시
                - 부산시
                - 창원시
                - 제주시
                - 서귀포시
        
        - name: profileImg
          in: formData
          description: user's profile image url
          type: string
          required: true
      
      requestBody:       
        content:         
          application/json:            
            schema:
              type: object
              properties:
                userId: 
                  type: string
                nickname:
                  type: string
                password:
                  type: string
                age:
                  type: number
                region:
                  type: string
                city:
                  type: string
                profileImg:
                  type: string
              example:
                userId: randID123
                nickname: randnick11
                password: randPW123
                age: 20
                region: 경기도
                city: 하남
                profileImg: random/url/path
     

  /api/users/signin:
    post:
      summary: Sign-in
      tags: [Users]
      description: POST Sign-in
      responses:
        200:
          description: Success
        401:
          description: |
            case1: unregistered user 
            
            case2: ID & password does NOT match
        500:
          description: internal server errors
      
      parameters:
        - name: userId
          in: formData
          description: user's ID
          type: string
          required: true

        - name: password
          in: formData
          description: user's password
          type: string
          required: true
      
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
              example:
                userId: randID123
                password: randPW123
  
  /api/users/sms_auth:
    post:
      summary: SMS service for authentication
      tags: [Users]
      description: POST SMS
      responses:
        200:
          description: User will get text message with random number length of 5
        409:
          description: User's phone number already exists
        500:
          description: Internal server error
      parameters:
        - name: pNum
          in: formData
          description: User's phone number
          type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pNum:
                  type: string
              example:
                pNum: '01077778888'
  
  /api/users/p_auth:
    post:
      summary: Authentication after user received authentication message
      tags: [Users]
      description: POST Authentication
      responses:
        200:
          description: Valid (phone number, authentication number, period(1m))
        401:
          description: Invalid (Any of or all of values do NOT meet the conditions)
        500:
          description: Internal server error
      parameters:
        - name: pNum
          in: formData
          description: User's phone number
          type: string
          required: true
        - name: aNum
          in: formData
          description: number that received for authentication
          type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pNum:
                  type: string
                aNum:
                  type: number
              example:
                pNum: '01077778888'
                aNum: 55112
  
  /api/users/duplicate:
    post:
      summary: Check if user sending duplicate ID or nickname
      tags: [Users]
      description: POST Duplicate check
      responses:
        200:
          description: Valid (ID or nickname does not matched to any other users)
        401:
          description: Invalid (duplicate error)
        500:
          description: Internal server error
      parameters:
        - name: userId or nickname
          in: formData
          description: User's ID or nickname
          type: string
          required: true
        
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
  
  /api/users/signout:
    delete:
      security:
        - cookieAuth: []
      summary: Sign-out (delete cookies)
      tags: [Users]
      description: DELETE Sign-out
      responses:
        204:
          description: Signed-out
        500:
          description: Internal server error
       
        

